// Mocks generated by Mockito 5.4.6 from annotations
// in pillpilot/test/widgets/edit_appointment_dialog_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter/material.dart' as _i7;
import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pillpilot/controllers/appointment/appointment_controller.dart'
    as _i5;
import 'package:pillpilot/models/appointment_model.dart' as _i4;
import 'package:pillpilot/models/appointment_state_model.dart' as _i3;
import 'package:pillpilot/services/appointment_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppointmentService_0 extends _i1.SmartFake
    implements _i2.AppointmentService {
  _FakeAppointmentService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAppointmentModel_1 extends _i1.SmartFake
    implements _i3.AppointmentModel {
  _FakeAppointmentModel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAppointment_2 extends _i1.SmartFake implements _i4.Appointment {
  _FakeAppointment_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AppointmentController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppointmentController extends _i1.Mock
    implements _i5.AppointmentController {
  MockAppointmentController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppointmentService get appointmentService =>
      (super.noSuchMethod(
            Invocation.getter(#appointmentService),
            returnValue: _FakeAppointmentService_0(
              this,
              Invocation.getter(#appointmentService),
            ),
          )
          as _i2.AppointmentService);

  @override
  _i3.AppointmentModel get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAppointmentModel_1(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i3.AppointmentModel);

  @override
  _i6.Stream<_i3.AppointmentModel> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i3.AppointmentModel>.empty(),
          )
          as _i6.Stream<_i3.AppointmentModel>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void handleError(String? message, [Object? error]) => super.noSuchMethod(
    Invocation.method(#handleError, [message, error]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> loadAppointments() =>
      (super.noSuchMethod(
            Invocation.method(#loadAppointments, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> loadAppointmentsForDate(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#loadAppointmentsForDate, [date]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<DateTime>> getDatesWithAppointments() =>
      (super.noSuchMethod(
            Invocation.method(#getDatesWithAppointments, []),
            returnValue: _i6.Future<List<DateTime>>.value(<DateTime>[]),
          )
          as _i6.Future<List<DateTime>>);

  @override
  _i6.Future<_i4.Appointment> createAppointment(
    String? title,
    DateTime? date,
    _i7.TimeOfDay? time, {
    String? notes = '',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #createAppointment,
              [title, date, time],
              {#notes: notes},
            ),
            returnValue: _i6.Future<_i4.Appointment>.value(
              _FakeAppointment_2(
                this,
                Invocation.method(
                  #createAppointment,
                  [title, date, time],
                  {#notes: notes},
                ),
              ),
            ),
          )
          as _i6.Future<_i4.Appointment>);

  @override
  _i6.Future<_i4.Appointment> updateAppointment(_i4.Appointment? appointment) =>
      (super.noSuchMethod(
            Invocation.method(#updateAppointment, [appointment]),
            returnValue: _i6.Future<_i4.Appointment>.value(
              _FakeAppointment_2(
                this,
                Invocation.method(#updateAppointment, [appointment]),
              ),
            ),
          )
          as _i6.Future<_i4.Appointment>);

  @override
  _i6.Future<void> deleteAppointment(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAppointment, [id]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i3.AppointmentModel? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i8.Change<_i3.AppointmentModel>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}
