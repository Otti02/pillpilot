// Mocks generated by Mockito 5.4.6 from annotations
// in pillpilot/test/controllers/medication_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/material.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pillpilot/models/medication_model.dart' as _i2;
import 'package:pillpilot/services/medication_service.dart' as _i3;
import 'package:pillpilot/services/notification_service.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMedication_0 extends _i1.SmartFake implements _i2.Medication {
  _FakeMedication_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MedicationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMedicationService extends _i1.Mock implements _i3.MedicationService {
  MockMedicationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Medication>> getMedications() =>
      (super.noSuchMethod(
            Invocation.method(#getMedications, []),
            returnValue: _i4.Future<List<_i2.Medication>>.value(
              <_i2.Medication>[],
            ),
          )
          as _i4.Future<List<_i2.Medication>>);

  @override
  _i4.Future<_i2.Medication> getMedicationById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getMedicationById, [id]),
            returnValue: _i4.Future<_i2.Medication>.value(
              _FakeMedication_0(
                this,
                Invocation.method(#getMedicationById, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Medication>);

  @override
  _i4.Future<_i2.Medication> createMedication(
    String? name,
    String? dosage,
    _i5.TimeOfDay? time,
    List<int>? daysOfWeek, {
    String? notes = '',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #createMedication,
              [name, dosage, time, daysOfWeek],
              {#notes: notes},
            ),
            returnValue: _i4.Future<_i2.Medication>.value(
              _FakeMedication_0(
                this,
                Invocation.method(
                  #createMedication,
                  [name, dosage, time, daysOfWeek],
                  {#notes: notes},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Medication>);

  @override
  _i4.Future<_i2.Medication> updateMedication(_i2.Medication? medication) =>
      (super.noSuchMethod(
            Invocation.method(#updateMedication, [medication]),
            returnValue: _i4.Future<_i2.Medication>.value(
              _FakeMedication_0(
                this,
                Invocation.method(#updateMedication, [medication]),
              ),
            ),
          )
          as _i4.Future<_i2.Medication>);

  @override
  _i4.Future<void> deleteMedication(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMedication, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i6.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> scheduleMedicationNotification({
    required _i2.Medication? medication,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#scheduleMedicationNotification, [], {
              #medication: medication,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cancelMedicationNotifications(String? medicationId) =>
      (super.noSuchMethod(
            Invocation.method(#cancelMedicationNotifications, [medicationId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> cancelAllNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAllNotifications, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
